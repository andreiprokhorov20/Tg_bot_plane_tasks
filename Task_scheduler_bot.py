import telebot
from telebot import types
from pymongo import MongoClient
from datetime import datetime
from dateutil import parser  # –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç
from bson import ObjectId

TOKEN = '7968336951:AAEEdd0gI4lV6unza548cnz19Tfo_AwmcXc'
bot = telebot.TeleBot(TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
client = MongoClient('mongodb://localhost:27017/')  # –ï—Å–ª–∏ –ë–î –Ω–∞ –¥—Ä—É–≥–æ–º —Å–µ—Ä–≤–µ—Ä–µ - —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π URL
db = client.task_manager  # –°–æ–∑–¥–∞–µ–º/–≤—ã–±–∏—Ä–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
tasks_collection = db.tasks  # –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á

@bot.message_handler(commands=['start'])
def start(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [
        '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É',
        'üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á',
        '‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É',
        '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É',
        '‚úÖ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å'
    ]
    markup.add(*buttons)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    user_data = {
        'user_id': message.chat.id,
        'first_launch': datetime.now()
    }
    db.users.update_one(
        {'user_id': message.chat.id},
        {'$setOnInsert': user_data},
        upsert=True
    )
    
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É')
def add_task(message):
    msg = bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ / 2024-03-20 18:00"
    )
    bot.register_next_step_handler(msg, process_task_input)
    
def process_task_input(message):
    try:
        task_text, deadline_str = message.text.split(' / ', 1)
        deadline = parser.parse(deadline_str)  # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–¥–∞—á–∏
        task = {
            'user_id': message.chat.id,
            'text': task_text,
            'deadline': deadline,
            'created_at': datetime.now(),
            'is_completed': False
        }
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
        result = tasks_collection.insert_one(task)
        bot.send_message(
            message.chat.id, 
            f"‚úÖ –ó–∞–¥–∞—á–∞ '{task_text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!\nID –∑–∞–¥–∞—á–∏: {result.inserted_id}"
        )
        
    except ValueError:
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ / –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú"
        )
    except Exception as e:
        bot.send_message(
            message.chat.id,
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        )

@bot.message_handler(func=lambda message: message.text == 'üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á')
def show_tasks(message):
    try:
        now = datetime.now()
        tasks = list(tasks_collection.find({'user_id': message.chat.id}))
        
        if not tasks:
            bot.send_message(message.chat.id, "üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç!")
            return

        # –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        overdue = []
        completed = []
        in_progress = []

        for task in tasks:
            if task['is_completed']:
                completed.append(task)
            else:
                delta = task['deadline'] - now
                if delta.days < 0:
                    overdue.append(task)
                else:
                    in_progress.append(task)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        overdue.sort(key=lambda x: x['deadline'])
        in_progress.sort(key=lambda x: x['deadline'])

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = []
        
        if overdue:
            response.append("\nüî¥ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
            for task in overdue:
                delta = now - task['deadline']
                response.append(
                    f"‚ñ´Ô∏è {task['text']}\n"
                    f"   ID: {task['_id']}\n"
                    f"   –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞: {delta.days} –¥–Ω–µ–π\n"
                    f"   –ò—Å—Ö–æ–¥–Ω—ã–π –¥–µ–¥–ª–∞–π–Ω: {task['deadline'].strftime('%d.%m.%Y %H:%M')}"
                )
                response.append("")

        if completed:
            response.append("\nüü¢ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
            for task in completed:
                response.append(
                    f"‚ñ´Ô∏è {task['text']}\n"
                    f"   ID: {task['_id']}\n"
                    f"   –î–µ–¥–ª–∞–π–Ω: {task['deadline'].strftime('%d.%m.%Y %H:%M')}"
                )
                response.append("")

        if in_progress:
            response.append("\nüü° –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:")
            for task in in_progress:
                delta = task['deadline'] - now
                hours, remainder = divmod(delta.seconds, 3600)
                minutes = remainder // 60
                time_left = f"{delta.days}–¥ {hours}—á {minutes}–º"
                
                response.append(
                    f"‚ñ´Ô∏è {task['text']}\n"
                    f"   ID: {task['_id']}\n"
                    f"   –î–µ–¥–ª–∞–π–Ω: {task['deadline'].strftime('%d.%m.%Y %H:%M')}\n"
                    f"   –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {time_left}"
                )
                response.append("")

        if not response:
            bot.send_message(message.chat.id, "üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç!")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—è–º–∏ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        full_response = "\n".join(response)
        if len(full_response) > 4096:
            for x in range(0, len(full_response), 4096):
                bot.send_message(message.chat.id, full_response[x:x+4096])
        else:
            bot.send_message(message.chat.id, full_response)

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(func=lambda message: message.text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É')
def edit_task_prompt(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    bot.register_next_step_handler(msg, process_edit_id)

def process_edit_id(message):
    try:
        task_id = ObjectId(message.text.strip())
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
        bot.register_next_step_handler(msg, lambda m: process_edit_text(m, task_id))
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏")

def process_edit_text(message, task_id):
    try:
        new_text = message.text.strip()
        result = tasks_collection.update_one(
            {'_id': task_id, 'user_id': message.chat.id},
            {'$set': {'text': new_text}}
        )
        
        if result.modified_count > 0:
            bot.send_message(message.chat.id, "‚úÖ –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        else:
            bot.send_message(message.chat.id, "‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(func=lambda message: message.text == '‚úÖ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å')
def toggle_status_prompt(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–¥–∞—á–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:")
    bot.register_next_step_handler(msg, process_toggle_status)

def process_toggle_status(message):
    try:
        task_id = ObjectId(message.text.strip())
        task = tasks_collection.find_one({'_id': task_id, 'user_id': message.chat.id})
        
        if not task:
            bot.send_message(message.chat.id, "‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
            
        new_status = not task['is_completed']
        tasks_collection.update_one(
            {'_id': task_id, 'user_id': message.chat.id},
            {'$set': {'is_completed': new_status}}
        )
        
        status_text = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞" if new_status else "‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
        bot.send_message(message.chat.id, f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: {status_text}")
        
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(func=lambda message: message.text == '‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É')
def delete_task(message):
    msg = bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á (–ì–ì–ì–ì-–ú–ú-–î–î):"
    )
    bot.register_next_step_handler(msg, process_delete_input)

def process_delete_input(message):
    try:
        date_str = message.text.strip()
        date = datetime.strptime(date_str, '%Y-%m-%d')
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –¥–∞—Ç–µ –∏ user_id
        result = tasks_collection.delete_many({
            'user_id': message.chat.id,
            'deadline': {'$gte': date.replace(hour=0, minute=0, second=0), '$lt': date.replace(hour=23, minute=59, second=59)}
        })
        
        if result.deleted_count > 0:
            bot.send_message(message.chat.id, f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {result.deleted_count} –∑–∞–¥–∞—á –Ω–∞ {date_str}!")
        else:
            bot.send_message(message.chat.id, "‚ùå –ó–∞–¥–∞—á –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            
    except ValueError:
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î."
        )
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

bot.polling()
